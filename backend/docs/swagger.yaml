basePath: /api
definitions:
  models.AverageRatingDTO:
    properties:
      NumberOfAgreedRatings:
        type: integer
      average:
        type: number
      ratingCardId:
        type: integer
    type: object
  models.CandidateRatingDTO:
    properties:
      category:
        type: string
      notApplicableCandidate:
        type: boolean
      orderId:
        type: integer
      question:
        type: string
      ratingCandidate:
        type: integer
      ratingCardId:
        type: integer
      textResponseCandidate:
        type: string
      timeStampCandidate:
        type: string
      userEmail:
        type: string
    type: object
  models.CategoryEnum:
    enum:
    - Performance
    - Technical Skillset
    - Technical Predispositions
    - Sales
    - Recruiting
    - Teamwork
    - Coaching
    - Prodyna Insights
    - Overall
    type: string
    x-enum-varnames:
    - CategoryPerformance
    - CategoryTechnicalSkillset
    - CategoryTechnicalPredisposition
    - CategorySales
    - CategoryRecruiting
    - CategoryTeamwork
    - CategoryCoaching
    - CategoryProdynaInsights
    - CategoryOverall
  models.EmployerRatingDTO:
    properties:
      category:
        type: string
      notApplicableCandidate:
        type: boolean
      notApplicableEmployer:
        type: boolean
      orderId:
        type: integer
      question:
        type: string
      ratingCandidate:
        type: integer
      ratingCardId:
        type: integer
      ratingEmployer:
        type: integer
      textResponseCandidate:
        type: string
      textResponseEmployer:
        type: string
      timeStampCandidate:
        type: string
      timeStampEmployer:
        type: string
      userEmail:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.HeadDataDTO:
    properties:
      abstract:
        type: string
      age:
        type: integer
      agreedOn:
        type: boolean
      country:
        type: string
      experienceSince:
        type: string
      name:
        type: string
      startAtProdyna:
        type: string
      submitToManagement:
        type: boolean
      userEmail:
        type: string
    type: object
  models.ManagementAverageDTO:
    properties:
      average:
        type: number
      category:
        $ref: '#/definitions/models.CategoryEnum'
    type: object
  models.ManagementSummaryDTO:
    properties:
      ratings:
        description: Array of management ratings
        items:
          $ref: '#/definitions/models.ManagementSummaryRatingDTO'
        type: array
      userEmail:
        type: string
    type: object
  models.ManagementSummaryRatingDTO:
    properties:
      category:
        $ref: '#/definitions/models.CategoryEnum'
      rating:
        type: number
    type: object
  models.RatingCard:
    properties:
      category:
        type: string
      id:
        type: integer
      orderId:
        type: integer
      question:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a Gin-based API for the Fox & Hound application.
  title: Fox & Hound API
  version: "1.0"
paths:
  /head-data:
    get:
      description: Fetches head data for certain candidate
      parameters:
      - description: User Email
        in: query
        name: userEmail
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.HeadDataDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get head data for candidate
      tags:
      - head-data
    post:
      consumes:
      - application/json
      description: Stores or updates head data in the database
      parameters:
      - description: head data
        in: body
        name: headData
        required: true
        schema:
          $ref: '#/definitions/models.HeadDataDTO'
      produces:
      - application/json
      responses:
        "201":
          description: 'message: HeadData saved successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to save headData
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Save head data
      tags:
      - head-data
  /management/agreed-candidates:
    get:
      description: Fetches head data for agreed candidates
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.HeadDataDTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get agreed candidates
      tags:
      - head-data
  /management/average:
    get:
      description: Fetches management average for cards
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ManagementAverageDTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get management average for cards
      tags:
      - management-average
  /management/summary:
    get:
      description: Fetches management summary for certain candidate
      parameters:
      - description: User Email
        in: query
        name: userEmail
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ManagementSummaryDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get management summary for candidate
      tags:
      - management-summary
  /rating-cards:
    get:
      description: Retrieves all rating cards from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.RatingCard'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all rating cards
      tags:
      - rating-card
  /ratings/average:
    get:
      description: Fetches average for every card - agreed on flag is a must
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AverageRatingDTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get average per card
      tags:
      - head-data
  /ratings/candidate:
    get:
      description: Fetches rating cards and enriches them with existing ratings for
        a given user
      parameters:
      - description: User Email
        in: query
        name: userEmail
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CandidateRatingDTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get candidate ratings
      tags:
      - rating-candidate
    post:
      consumes:
      - application/json
      description: Stores or updates candidate ratings in the database
      parameters:
      - description: List of candidate ratings
        in: body
        name: ratings
        required: true
        schema:
          items:
            $ref: '#/definitions/models.CandidateRatingDTO'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: 'message: Ratings saved successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to save ratings
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Save candidate ratings
      tags:
      - rating-candidate
  /ratings/employer:
    get:
      description: Fetches rating cards and enriches them with existing ratings for
        a given user
      parameters:
      - description: User Email
        in: query
        name: userEmail
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.EmployerRatingDTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get candidate ratings for employer
      tags:
      - rating-employer
    post:
      consumes:
      - application/json
      description: Stores or updates candidate ratings of employer in the database
      parameters:
      - description: List of candidate ratings
        in: body
        name: ratings
        required: true
        schema:
          items:
            $ref: '#/definitions/models.EmployerRatingDTO'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: 'message: Ratings saved successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to save ratings
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Save employer ratings
      tags:
      - rating-employer
  /ratings/employer/candidates:
    get:
      description: Fetches rating candidates
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get rating candidates
      tags:
      - rating-employer
swagger: "2.0"
